import numpy as np
import matplotlib.pyplot as plt
from scipy.odr import ODR, Model, RealData
from sklearn.linear_model import LinearRegression
# Génération de données avec erreurs
np.random.seed(0)
x = np.linspace(0, 10, 10)
y = 2 * x + 1 + np.random.normal(size=x.size)
# Régression MCO
mco_model = LinearRegression()
mco_model.fit(x.reshape(-1, 1), y)
y_mco_pred = mco_model.predict(x.reshape(-1, 1))
# Régression Orthogonale
def orthogonal_func(beta, x):
return beta[0] * x + beta[1]
data = RealData(x, y)
model = Model(orthogonal_func)
odr = ODR(data, model, beta0=[1., 2.])
odr_res = odr.run()
y_ortho_pred = orthogonal_func(odr_res.beta, x)
# Visualisation
plt.scatter(x, y, label='Données')
plt.plot(x, y_mco_pred, label='MCO', color='red')
plt.plot(x, y_ortho_pred, label='Régression Orthogonale', color='green')
plt.legend()
plt.show()
library(reticulate)
reticulate::repl_python()
numpy <- import("numpy")
reticulate::py_last_error()
py_install("numpy")
py_install("matplotlib.pyplot")
py_install("matplotlib")
py_install("scikit-learn")
py_install("scipy")
library(reticulate)
use_virtualenv("/Users/f.b/.virtualenvs/r-reticulate")
library(reticulate)
use_virtualenv("/Users/f.b/.virtualenvs/r-reticulate")
reticulate::repl_python()
